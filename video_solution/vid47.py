'''Project Euler (Q14) - Longest Collatz sequence (Revisited)

The following iterative sequence is defined for the set of positive integers:

    n → n/2 (n is even)
    n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

    13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. 

Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

Which starting number, under one million (1,000,000), produces the longest chain?
'''
def next_value(num):
    if num % 2 == 0:
        return num // 2
    else:
        return (3 * num) + 1
# end of next_value

def sequence_maker(start, table):
    if start in table:
        return table[start]
    else:
        sequence = [start] # initialize our sequence
        size = 1 # initialize our size

        # while our last value is not one and that we have never analyzed this last number before
        while sequence[-1] != 1 and sequence[-1] not in table:
            # Generate the next number
            new_num = next_value(sequence[-1])

            if new_num in table:
                # if the next number was calculated before ... we can generate the length to be:
                # the current size value + the returned value from the dictionary
                size = size + table[new_num]
                break
            else:
                # if the next number was never seen before
                # we add it to our sequence and increase our size by 1
                sequence.append(new_num)
                size += 1
        # end of while loop                

        # For all new values we encountered, give them their respective length
        for i in range(len(sequence)):
            # Mutating an Outer Dictionary within a function!
            table[sequence[i]] = size - i
        
        return size
# end of sequence maker

# Example 1: What happens with 13?
memory = {1:1, 2:2} # A dictionary that contains the following:
# key --> the starting value of the sequence
# value --> the length of the sequence for that starting value

start = 13
test = sequence_maker(start, memory)

print(f"{start} has a {test} many terms.")
print()
for key, value in memory.items():
    print(f"{key} has {value} terms")
print()

# Example 2: Analyzing 1,000,000
memory = {1:1, 2:2} # reset memory
# Populate memory with all numbers from 1 to 1,000,000's length
for start in range(3, 1000000):
    current_length = sequence_maker(start, memory)

# Determine the longest length for keys of 1 to 1,000,000
answer = 0
longest_length = 0
for key in range(1, 1000000):
    if memory[key] > longest_length:
        answer = key
        longest_length = memory[key]

print(f"Longest Sequence has a length of {longest_length} generated by {answer}.")